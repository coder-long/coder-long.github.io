[{"title":"YAML文件是干什么的?","url":"/2022/07/15/YAML文件是干什么的/","content":"\nYAML 是 \"YAML Ain't a Markup Language\"（YAML 不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：\"Yet Another Markup Language\"（仍是一种标记语言）。\n\nYAML 的语法和其他高级语言类似，并且可以简单表达清单、散列表，标量等数据形态。它使用空白符号缩进和大量依赖外观的特色，特别适合用来表达或编辑数据结构、各种配置文件、倾印调试内容、文件大纲（例如：许多电子邮件标题格式和YAML非常接近）。\n\nYAML 的配置文件后缀为 .yml\n\n## 基本语法\n\n- 大小写敏感\n- 使用缩进表示层级关系\n- 缩进时不允许使用Tab键，只允许使用空格。\n- 缩进的空格数目不重要，只要相同层级的元素左侧对齐即可\n\n## 数据类型\n\n- 对象：键值对的集合，又称为映射（mapping）/ 哈希（hashes） / 字典（dictionary）\n- 数组：一组按次序排列的值，又称为序列（sequence） / 列表（list）\n- 纯量（scalars）：单个的、不可再分的值\n\n## 对象\n\n```yml\ninfo:\n  version: \"1.0.0\"\n  title: \"CMAP website api\"\n```\n\n转换为js\n\n```js\ninfo: { version: '1.0.0', title: 'CMAP website api' }\n```\n\n第二种写法\n\n```yml\ninfo: {version: 1.0.0, title: CMAP website api}\n```\n\n转换为js\n\n```js\ninfo: { version: '1.0.0', title: 'CMAP website api' }\n```\n\n## 数组\n\n使用 `-`\n\n```yml\n  - name: \"Website\"\n  - name: \"Site\"\n  - name: \"Components\"\n  - name: \"Variation\"\n```\n转换成js\n\n```js\n  [\n    { name: 'Website' },\n    { name: 'Site' },\n    { name: 'Components' },\n    { name: 'Variation' }\n  ]\n```\n\n```yml\n-\n  - name: \"Website\"\n  - name: \"Site\"\n  - name: \"Components\"\n  - name: \"Variation\"\n```\n转换成js\n\n```js\n  [[\n    { name: 'Website' },\n    { name: 'Site' },\n    { name: 'Components' },\n    { name: 'Variation' }\n  ]]\n```\n\n```yml\ntags:\n  - name: \"Website\"\n  - name: \"Site\"\n  - name: \"Components\"\n  - name: \"Variation\"\n```\n\n转换成js\n\n```js\n  tags: [\n    { name: 'Website' },\n    { name: 'Site' },\n    { name: 'Components' },\n    { name: 'Variation' }\n  ]\n```\n\n## 复合结构\n\n```yml\nswagger: \"2.0\"\ninfo:\n  version: \"1.0.0\"\n  title: \"CMAP website api\"\nbasePath: \"/api\"\nhost: \"local.cmap.com\"\ntags:\n  - name: \"Website\"\n  - name: \"Site\"\n  - name: \"Components\"\n  - name: \"Variation\"\nschemes:\n  - http\n```\n\n转换成js\n\n```js\n{\n  swagger: '2.0',\n  info: { version: '1.0.0', title: 'CMAP website api' },\n  basePath: '/api',\n  host: 'local.cmap.com',\n  tags: [\n    { name: 'Website' },\n    { name: 'Site' },\n    { name: 'Components' },\n    { name: 'Variation' }\n  ],\n  schemes: [ 'http' ]\n}\n```\n\n## 转换code\n\n- 安装[`npm install js-yaml`](https://www.npmjs.com/package/js-yaml)\n\n_config.yml\n\n```yml\nswagger: \"2.0\"\ninfo:\n  version: \"1.0.0\"\n  title: \"CMAP website api\"\nbasePath: \"/api\"\nhost: \"local.cmap.com\"\ntags:\n  - name: \"Website\"\n  - name: \"Site\"\n  - name: \"Components\"\n  - name: \"Variation\"\nschemes:\n  - http\n```\n\ntransform.js\n\n```js\nconst yaml = require('js-yaml');\nconst fs = require('fs');\nconst path = require('path')\n// 读取yml文件\nconst ymlFile = fs.readFileSync(path.resolve(__dirname, '_config.yml'), { encoding: 'utf-8' })\n\nconst ymldata = yaml.load(ymlFile);\n\nconsole.log(ymldata);\n\n// {\n//   swagger: '2.0',\n//   info: { version: '1.0.0', title: 'CMAP website api' },\n//   basePath: '/api',\n//   host: 'local.cmap.com',\n//   tags: [\n//     { name: 'Website' },\n//     { name: 'Site' },\n//     { name: 'Components' },\n//     { name: 'Variation' }\n//   ],\n//   schemes: [ 'http' ]\n// }\n```\n\n> https://www.ruanyifeng.com/blog/2016/07/yaml.html","tags":["YMAL","YML"]},{"title":"什么是微服务?","url":"/2022/07/15/什么是微服务/","content":"\n> [https://www.ruanyifeng.com/blog/2022/04/microservice.html](https://www.ruanyifeng.com/blog/2022/04/microservice.html)","tags":["微服务"]},{"title":"函数组件使用context","url":"/2022/07/04/函数组件使用context/","content":"\n[https://zh-hans.reactjs.org/docs/hooks-reference.html#usecontext](https://zh-hans.reactjs.org/docs/hooks-reference.html#usecontext)\n\n直接上代码\n```js\nimport PropTypes from 'prop-types';\nimport { createContext, useState, useEffect } from 'react';\n// material\nimport { useMediaQuery } from '@material-ui/core';\nimport { useTheme } from '@material-ui/core/styles';\n\n// ----------------------------------------------------------------------\n// 定义provider的value\nconst initialState = {\n  collapseClick: false,\n  collapseHover: false,\n  onToggleCollapse: () => {},\n  onHoverEnter: () => {},\n  onHoverLeave: () => {},\n};\n\n// 定义context\nconst CollapseDrawerContext = createContext(initialState);\n\nCollapseDrawerProvider.propTypes = {\n  children: PropTypes.node,\n};\n\n// 封装provider\nfunction CollapseDrawerProvider({ children }) {\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('lg'));\n  const [collapse, setCollapse] = useState({\n    click: false,\n    hover: false,\n  });\n\n  useEffect(() => {\n    if (isMobile) {\n      setCollapse({\n        click: false,\n        hover: false,\n      });\n    }\n  }, [isMobile]);\n\n  const handleToggleCollapse = () => {\n    setCollapse({ ...collapse, click: !collapse.click });\n  };\n\n  const handleHoverEnter = () => {\n    if (collapse.click) {\n      setCollapse({ ...collapse, hover: true });\n    }\n  };\n\n  const handleHoverLeave = () => {\n    setCollapse({ ...collapse, hover: false });\n  };\n\n  return (\n    <CollapseDrawerContext.Provider\n      value={{\n        isCollapse: collapse.click && !collapse.hover,\n        collapseClick: collapse.click,\n        collapseHover: collapse.hover,\n        onToggleCollapse: handleToggleCollapse,\n        onHoverEnter: handleHoverEnter,\n        onHoverLeave: handleHoverLeave,\n      }}\n    >\n      {children}\n    </CollapseDrawerContext.Provider>\n  );\n}\n\nexport { CollapseDrawerProvider, CollapseDrawerContext };\n```\n\n自定义钩子封装\n```js\nimport { useContext } from 'react';\nimport { CollapseDrawerContext } from '../contexts/CollapseDrawerContext';\n\n// ----------------------------------------------------------------------\n// 自定义useCollapseDrawer hook\nconst useCollapseDrawer = () => {\n  return useContext(CollapseDrawerContext);\n};\n\nexport default useCollapseDrawer;\n\n```\n\n函数组建使用定义的 `CollapseDrawerContext`\nindex.js\n```js\nReactDOM.render(\n  <StrictMode>\n    <CollapseDrawerProvider>\n        <App />\n    </CollapseDrawerProvider>\n  </StrictMode>,\n  document.getElementById('root'),\n);\n```\n函数组件中使用\n```js\n\nexport default function DocumentLayout() {\n  const {\n    isCollapse,\n    collapseClick,\n    collapseHover,\n    onHoverEnter,\n    onHoverLeave,\n  } = useCollapseDrawer();\n\n  return (\n    <div>\n        <button\n          onMouseEnter={onHoverEnter}\n          onMouseLeave={onHoverLeave}\n        ></button>\n    </div>\n  );\n}\n```","tags":["react context"]},{"title":"项目中用到的包","url":"/2022/07/01/项目中用到的包/","content":"\n* `npm i react-helmet-async`\n\n* `jss-rtl`\n  用于使用 JavaScript 生成样式表的库。\n\n* `framer-motion`\n* `nprogress` 进度条\n* [`mui`](https://mui.com/)"},{"title":"live2d部件模型","url":"/2022/06/29/live2d部件模型/","content":"\n<!-- # live2d部件模型 -->\n* live2d-widget-model-chitose\n  ![jnexG6.png](https://s1.ax1x.com/2022/06/29/jnexG6.png)\n\n* live2d-widget-model-epsilon2_1\n  ![jnmVit.png](https://s1.ax1x.com/2022/06/29/jnmVit.png)\n\n* live2d-widget-model-gf\n  ![jnmYWV.png](https://s1.ax1x.com/2022/06/29/jnmYWV.png)\n\n* live2d-widget-model-haru/01 (use npm install --save live2d-widget-model-haru)\n* live2d-widget-model-haru/02 (use npm install --save live2d-widget-model-haru)\n\n\n* live2d-widget-model-haruto\n  ![jnn0c8.png](https://s1.ax1x.com/2022/06/29/jnn0c8.png)\n\n* live2d-widget-model-hibiki\n  ![jnu82V.png](https://s1.ax1x.com/2022/06/29/jnu82V.png)\n\n* live2d-widget-model-hijiki\n  ![jnu5Gt.png](https://s1.ax1x.com/2022/06/29/jnu5Gt.png)\n\n* live2d-widget-model-izumi\n  ![jnK0eg.png](https://s1.ax1x.com/2022/06/29/jnK0eg.png)\n\n* live2d-widget-model-koharu\n  ![jnKDoj.png](https://s1.ax1x.com/2022/06/29/jnKDoj.png)\n\n* live2d-widget-model-miku\n  ![jnKhmF.png](https://s1.ax1x.com/2022/06/29/jnKhmF.png)\n\n* live2d-widget-model-ni-j\n  ![jnKL6K.png](https://s1.ax1x.com/2022/06/29/jnKL6K.png)\n\n* live2d-widget-model-nico\n  ![jnMptA.png](https://s1.ax1x.com/2022/06/29/jnMptA.png)\n\n* live2d-widget-model-nietzsche\n  ![jnMF6f.png](https://s1.ax1x.com/2022/06/29/jnMF6f.png)\n\n* live2d-widget-model-nipsilon\n  ![jnMtAJ.png](https://s1.ax1x.com/2022/06/29/jnMtAJ.png)\n\n* live2d-widget-model-nito\n  ![jnMw1x.png](https://s1.ax1x.com/2022/06/29/jnMw1x.png)\n\n* live2d-widget-model-shizuku\n  ![jne7MF.png](https://s1.ax1x.com/2022/06/29/jne7MF.png)\n\n* live2d-widget-model-tororo\n  ![jnMsBD.png](https://s1.ax1x.com/2022/06/29/jnMsBD.png)\n\n* live2d-widget-model-tsumiki\n  ![jnMf3t.png](https://s1.ax1x.com/2022/06/29/jnMf3t.png)\n\n* live2d-widget-model-unitychan\n  ![jnM4jf.png](https://s1.ax1x.com/2022/06/29/jnM4jf.png)\n\n* live2d-widget-model-wanko\n  ![jnMq4s.png](https://s1.ax1x.com/2022/06/29/jnMq4s.png)\n\n* live2d-widget-model-z16\n  ![jnQnbD.png](https://s1.ax1x.com/2022/06/29/jnQnbD.png)\n\n* live2d-widget-model-kasumi\n  ![](https://camo.githubusercontent.com/099054215fd7a712eafc31b61a9e07902b59494a74cfcdaf02632e0a7f6092ef/68747470733a2f2f67697465652e636f6d2f417567753173746f2f696d616765486f73742f7261772f6d61737465722f426c6f67496d672f3230323131323136313832333933362e706e67)\n\n[https://github.com/xiazeyu/live2d-widget-models](https://github.com/xiazeyu/live2d-widget-models)","tags":["live2d","live2d部件模型"],"categories":["live2d"]},{"title":"react18 新特性","url":"/2022/06/29/react18-new-feature/","content":"\n## 自动批处理\n\n使用set函数时不会像之前执行一个set函数渲染一次界面(更改一个状态渲染一次界面)，会等到某一处理函数中set函数都执行完了之后渲染界面（只在最后渲染界面）\nexample\n```js\nconst handleClick = () =>{\n  setIsFetching(false);\n  setStatus('success');\n}\n\n// Before: only React events were batched.\nsetTimeout(() => {\n  setCount(c => c + 1);\n  setFlag(f => !f);\n  // React will render twice, once for each state update (no batching)\n}, 1000);\n\n// After: updates inside of timeouts, promises,\n// native event handlers or any other event are batched.\nsetTimeout(() => {\n  setCount(c => c + 1);\n  setFlag(f => !f);\n  // React will only re-render once at the end (that's batching!)\n}, 1000);\n```\n\n\n\n## 新的客户端和服务器渲染 API\n\n- createRoot\n```js\n// Before\nimport { render } from 'react-dom';\nconst container = document.getElementById('app');\nrender(<App tab=\"home\" />, container);\n\n// After\nimport { createRoot } from 'react-dom/client';\nconst container = document.getElementById('app');\nconst root = createRoot(container); // createRoot(container!) if you use TypeScript\nroot.render(<App tab=\"home\" />);\n```\n- hydrateRoot\n\n## [新功能 transition](https://reactjs.org/blog/2022/03/29/react-v18.html#new-feature-transitions)\n\nreact.memo\n\n## 支持 Suspense 的流式服务器端渲染\n\n某一组件先加载出来，某一组件后加载出来（服务端返回的html）,就可以使用Suspense，提升用户体验\nIn React 18, we’ve added support for Suspense on the server and expanded its capabilities using concurrent rendering features.\n\nSuspense in React 18 works best when combined with the transition API. If you suspend during a transition, React will prevent already-visible content from being replaced by a fallback. Instead, React will delay the render until enough data has loaded to prevent a bad loading state.\n```js\n// 该组件是动态加载的\nconst OtherComponent = React.lazy(() => import('./OtherComponent'));\n\nfunction MyComponent() {\n  return (\n    // 显示 <Spinner> 组件直至 OtherComponent 加载完成\n    <React.Suspense fallback={<Spinner />}>\n      <div>\n        <OtherComponent />\n      </div>\n    </React.Suspense>\n  );\n}\n```\n\n## 新的严格模式行为\n\n## 新的钩子\n\n* useId\n  useId用于在客户端和服务器上生成唯一 ID，同时避免水合不匹配。它主要用于与需要唯一 ID 的可访问性 API 集成的组件库。这解决了 React 17 及更低版本中已经存在的问题，但在 React 18 中更为重要，因为新的流式服务器渲染器如何无序交付 HTML。\n\n\n* useTransition\n* startTransition\n  useTransition并startTransition让您将一些状态更新标记为不紧急。默认情况下，其他状态更新被认为是紧急的。React 将允许紧急状态更新（例如，更新文本输入）以中断非紧急状态更新（例如，呈现搜索结果列表）。\n\n\n* useDeferredValue\n  useDeferredValue让您推迟重新渲染树的非紧急部分。它类似于去抖动，但与之相比有一些优点。没有固定的时间延迟，因此 React 将在第一次渲染反映在屏幕上后立即尝试延迟渲染。延迟渲染是可中断的，不会阻止用户输入。\n\n* useSyncExternalStore\n  useSyncExternalStore是一个新的钩子，它允许外部存储通过强制对存储的更新同步来支持并发读取。在实现对外部数据源的订阅时，它消除了对 useEffect 的需要，并且推荐用于任何与 React 外部状态集成的库。\n\n* useInsertionEffect\n  useInsertionEffect它允许 CSS-in-JS 库解决在渲染中注入样式的性能问题。除非您已经构建了 CSS-in-JS 库，否则我们不希望您使用它。这个钩子将在 DOM 发生变异之后运行，但在布局效果读取新布局之前。这解决了在 React 17 及更低版本中已经存在的问题，但在 React 18 中更为重要，因为 React 在并发渲染期间屈服于浏览器，使其有机会重新计算布局。\n\n\n## [详细更新日志](https://github.com/facebook/react/blob/main/CHANGELOG.md#1800-march-29-2022)","tags":["react","react18"]},{"title":"drupal主题更改,相关配置","url":"/2022/06/27/drupal主题更改-相关配置/","content":"\n# Drupal 主题设置\n\n## 使用 DDEV 安装 Drupal 环境\n- 安装ddev\n  ```bash\n  $ curl -LO https://raw.githubusercontent.com/drud/ddev/master/scripts/install_ddev.sh && bash install_ddev.sh\n  ```\n- 搭建环境 # Replace my-site-name\n  ```bash\n  $ export SITE_NAME=my-site-name\n\n  $ mkdir $SITE_NAME\n\n  $ cd $SITE_NAME\n\n  $  ddev config --project-type=drupal9 --project-name $SITE_NAME --docroot=web --create-docroot\n  ```\n- 启动 DDEV 容器\n  ```bash\n  $ ddev start\n  ```\n- 创建drupal应用程序\n  - 如果您的机器上没有安装 Composer，到官网上下载安装，或者使用`my-site-nameddev composer`\n- 开始安装\n  ```bash\n  $ ddev composer create \"drupal/recommended-project\"\n\n  $ ddev composer require drush/drush\n  ```\n- 安装drupal\n  ```bash\n  $ ddev drush site:install --account-name=admin --account-pass=admin\n\n  $ ddev launch\n  ```\n- 安装开发生成模块\n  - 下载并安装Devel Generate 模块（Devel 项目的一部分）并使用它来生成一些示例内容\n  ```bash\n  $ ddev composer require drupal/devel\n\n  $ ddev drush en devel_generate\n  ```\n  - **没有ddev安装**\n  ```bash\n  $ composer require drupal/devel\n\n  $ drush en devel_generate\n  ```\n- 生成用户、标签和内容\n  Devel Generate 带有自定义 Drush 命令，我们可以使用这些命令来生成用户、标签和内容。我们建议您按以下顺序运行命令，以便将您生成的内容分配给随机用户以模拟更真实的体验。\n  ```bash\n  $ ddev drush devel-generate-users 10\n  $ ddev drush devel-generate-terms 20 --bundles tags --max-depth 1\n  $ ddev drush devel-generate-content 25\n  ```\n (optional)  (required in Drupal 9, optional for Drupal 8)  (optional)  (optional)  (optional)  (optional)  (optional)  (optional)  (optional)  (deprecated)  (optional)\n\n## 建立主题\n- 在`web/themes`目录下建立自己的主题`reboot`文件夹\n  ![jCpZQA.png](https://s1.ax1x.com/2022/06/23/jCpZQA.png)\n- 在reboot文件夹下面创建`reboot.info.yml`(命名规范必须是THEME.info.yml)\n- `THEME.info.yml`文件配置属性\n  | 参数                 | 是否必填                                                                    | 描述                                                                                                                                                                                                    |\n  | -------------------- | --------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n  | name                 | 是                                                                          | 主题名称                                                                                                                                                                                                |\n  | type                 | 是                                                                          | 表示扩展的类型，\"module\", \"theme\", or \"profile\"对于主题，应始终将其设置为“主题”。此值区分大小写。                                                                                                       |\n  | description          | 否                                                                          | 主题描述信息                                                                                                                                                                                            |\n  | dependencies         | 否                                                                          | 一个依赖字符串数组，在 8.9.x 中引入。                                                                                                                                                                   |\n  | package              | 否                                                                          | 指定允许您将主题组合在一起的“包”。                                                                                                                                                                      |\n  | core                 | Drupal 8所需的，如果包含 core _ version _ request 则为可选，对 Drupal 9无效 | 指定主题兼容的 Drupal 核心版本。                                                                                                                                                                        |\n  | php                  | 否                                                                          | 所需的最低 PHP 版本。默认为`DRUPAL_MINIMUM_PHP`常量的值。                                                                                                                                               |\n  | version              | 否                                                                          | 指定版本。对于托管在 drupal.org 上的主题，版本号将由打包脚本填写。不要手动指定它，而是完全省略版本行。                                                                                                  |\n  | libraries            | 否                                                                          | 要添加到主题处于活动状态的所有页面的库列表（可以包含 CSS 和 JavaScript 资产）                                                                                                                           |\n  | libraries-override   | 否                                                                          | 要覆盖的库和资产的集合，[更多内容覆盖和扩展库](https://www.drupal.org/node/2216195#override-extend)                                                                                                     |\n  | libraries-extend     | 否                                                                          | 附加库时要添加的库和资产的集合                                                                                                                                                                          |\n  | base theme           | Drupal9必须, Drupal8可选                                                    | 一个主题可以通过将其指定为基本主题来继承另一个主题的资源。建议使用 classy 或 stable9（如果使用 Drupal 8 则为 stable）。如果设置为 false，则不使用基本主题。                                             |\n  | hidden               | 否                                                                          | 指示是否从“外观”页面隐藏主题，使其无法通过 UI 启用/禁用。                                                                                                                                               |\n  | engine               | 否                                                                          | 主题引擎。默认为“twig”。                                                                                                                                                                                |\n  | logo                 | 否                                                                          | logo相对于主题文件的路径。默认情况下，Drupal 将在主题文件夹的根目录中查找名为“logo.svg”的文件并将其用作主题的logo。 .info.yml                                                                           |\n  | screenshot           | 否                                                                          | 相对于主题文件的截图路径。屏幕截图应为 588 像素宽和 438 像素高，尽管它们以较小的尺寸显示。默认情况下，Drupal 将在主题文件夹的根目录中查找名为“screenshot.png”的文件，并将其用作“外观”页面上的主题图像。 |\n  | regions              | 否                                                                          | 主题区域列表。（请注意，区域键前面没有破折号。）content区域是必需的。阅读有关将区域添加到主题的更多信息。                                                                                               |\n  | regions_hidden       | 否                                                                          | 要删除的继承区域列表。                                                                                                                                                                                  |\n  | features             | 否                                                                          | 在主题“设置”页面上公开的功能列表。                                                                                                                                                                      |\n  | ckeditor_stylesheets | 否                                                                          | 要添加到 CKEditor 框架的样式表列表。                                                                                                                                                                    |\n\n配置好主题之后会在界面的后台找到\n![jCAIER.md.png](https://s1.ax1x.com/2022/06/23/jCAIER.md.png)\n\n## 配置regions\n区域在主题的.info.yml文件中表示为键/值对，其中键是用于在代码中标识区域的区域的内部名称，值是用户界面在识别地区。出于这个原因，使用在代码和 UI 中都有意义的键/值对和区域名称非常重要，这样任何人都可以轻松理解预期用途。\n\n区域的内容由放置在当前正在查看的页面上可见的区域中的任何块组成，并且通常在包装标记内的主题的page.html.twig模板文件中输出，就像div旨在提供布局和结构一样。\n- `info.yml`\n  ```yml\n  regions:\n    header: Header1\n    primary_menu: Primary menu1\n    secondary_menu: Secondary menu1\n    page_top: Page top1\n    page_bottom: Page bottom1\n    highlighted: Highlighted1\n    featured_top: Featured top1\n    breadcrumb: Breadcrumb1\n    content: Content1\n    sidebar_first: Sidebar first1\n    sidebar_second: Sidebar second1\n    footer_first: Footer first1\n    footer_second: Footer second1\n    + aaa_content: AAA content\n  ```\n- `page.html.twig`(建templates文件夹，把page.html.twig复制进来) 修改内容\n  ![jCm4ts.md.png](https://s1.ax1x.com/2022/06/23/jCm4ts.md.png)\n\n## 资源模块，外部内部引用\n\nAsset Libraries是THEMENAME.libraries.yml文件中的 YAML 数据结构，它指定一个或多个 CSS 和 JavaScript 文件及其设置，并以唯一标识的库名称捆绑在一起。一旦定义了库，将其添加到页面或将其附加到特定类型的元素，无论库的内容如何，​​都以相同的方式完成。这意味着现在有一种统一的机制来添加 CSS 和 JavaScript，无论是添加到模块还是主题中。\n\n- `THEMENAME.libraries.yml`\n  声明模块 aaa、bbb、ccc，模块中定义需要用到的js、css、依赖包等,\n  加载顺序按照文件列出顺序加载\n  ```yml\n  # aaa模块\n  aaa:\n    version: 1.0\n    css:\n      theme:\n        css/aaa.css: {}\n    header: true # 设置在头部先加载\n    js:\n      js/aaa.js: {}\n\n  # bbb模块\n  bbb:\n    version: 1.0\n    css:\n      theme:\n        css/bbb.css: {}\n    js:\n      js/bbb.js: {}\n\n  # ccc模块\n  ccc:\n    version: 1.0\n    remote: https://github.com/xoxco/rainbow-text\n    license:\n      name: MIT\n      url: https://github.com/xoxco/Rainbow-Text/blob/master/README.md\n      gpl-compatible: true\n    css:\n      theme:\n        css/ccc.css: {}\n    js:\n      js/ccc.js: {}\n    dependencies: # 声明依赖\n      - core/jquery\n      - my_module/my_library\n      - my_theme/my_library\n  ```\n  - **remote：** 如果库是第三方脚本，则提供存储库 URL 以供参考。\n  - **license：** 如果设置了remote属性，则需要license信息。它有 3 个属性：\n    - **名称：** 许可证的可读名称。\n    - **url：** 所用库版本的许可文件/信息的 URL。\n    - **gpl-compatible：** 此库是否与 GPL 兼容的布尔值。\n- 定义的模块如何使用\n  - 全局使用\n    在`THEME.info.yml`libraries引入\n    ```yml\n     libraries:\n      - reboot/aaa\n      - reboot/bbb\n      - reboot/ccc\n    ```\n    ![jClcXq.md.png](https://s1.ax1x.com/2022/06/23/jClcXq.md.png)\n  - 特定页面使用\n    在`THEME.theme`,首页使用aaa模块\n    ```php\n    <?php\n    /**\n    * Implements hook_preprocess_page() for PAGE document templates.\n    */\n    function reboot_preprocess_page(&$variables) {\n      if ($variables['is_front'] == TRUE) {\n        $variables['#attached']['library'][] = 'reboot/aaa';\n      }\n    }\n\n    ```\n    ![jERjKS.md.png](https://s1.ax1x.com/2022/06/27/jERjKS.md.png)\n\n---\n\n## 为主题开发配置环境\n![jEfdw4.md.png](https://s1.ax1x.com/2022/06/27/jEfdw4.md.png)\n![jEfrf1.md.png](https://s1.ax1x.com/2022/06/27/jEfrf1.md.png)\n![jEfgOO.md.png](https://s1.ax1x.com/2022/06/27/jEfgOO.md.png)\n![jEffTH.md.png](https://s1.ax1x.com/2022/06/27/jEffTH.md.png)\n\n---\n\n## 什么是模板文件？Drupal 如何确定使用哪个模板？\n![jE4jWn.md.png](https://s1.ax1x.com/2022/06/27/jE4jWn.md.png)\n![jE5eQx.md.png](https://s1.ax1x.com/2022/06/27/jE5eQx.md.png)\n![jE5QTe.md.png](https://s1.ax1x.com/2022/06/27/jE5QTe.md.png)\n![jE58fA.md.png](https://s1.ax1x.com/2022/06/27/jE58fA.md.png)\n![jE5wTg.md.png](https://s1.ax1x.com/2022/06/27/jE5wTg.md.png)\n![jE5H6x.md.png](https://s1.ax1x.com/2022/06/27/jE5H6x.md.png)\n\n---\n\n## 覆盖模板文件\n![jETxNF.md.png](https://s1.ax1x.com/2022/06/27/jETxNF.md.png)\n![jE7VAO.md.png](https://s1.ax1x.com/2022/06/27/jE7VAO.md.png)\n\n---\n\n## 确定模板的基本名称\n![jV95Sx.md.png](https://s1.ax1x.com/2022/06/27/jV95Sx.md.png)\n![jV9TOO.md.png](https://s1.ax1x.com/2022/06/27/jV9TOO.md.png)\n![jV9xpt.md.png](https://s1.ax1x.com/2022/06/27/jV9xpt.md.png)\n","tags":["drupal主题"]},{"title":"hexo博客搭建，主题配置","url":"/2022/06/17/hexo博客搭建主题配置/","content":"\n文档 [https://hexo.io/zh-cn/docs/](https://hexo.io/zh-cn/docs/)\n\n\n## 1.准备工作\n本地下载安装 *[nodejs](http://nodejs.cn/download/)*\n\n安装hexo-cli\n```javascript\n& npm install -g hexo-cli\n```\n\n## 2.初始化\n本地新建一个文件夹Blob,终端输入下面命令，或者手动创建文件夹\n```javascript\n$ mkdir Blob\n```\n```javascript\n$ hexo init Blob\n```\n\n初始化完成之后\n```javascript\n$ cd Blob\n```\n```javascript\n$ npm install\n```\n```javascript\n$ hexo s\n```\n![Alt](aaa.png)\n\n访问http://localhost:4000/\n\n## 3.hexo 常用命令\n\n\n| 命令                           | 描述                                                                            |\n| ------------------------------ | ------------------------------------------------------------------------------- |\n| hexo init [folder]             | 初始化博客,将博客基本模块下载到本地folder下面                                   |\n| hexo new [layout] [blob title] | 创建博客文章，layout指定使用布局，不指定则使用默认布局，blob title 博客文章标题 |\n| hexo clean                     | 清理缓存文件（db.json）和生成的public                                           |\n| hexo s 或 hexo server          | 本地启动站点，访问localhost:4000                                                |\n| hexo g 或 hexo generate        | 生成部署前的站点                                                                |\n| hexo d 或 hexo devlop          | 部署站点                                                                        |\n| hexo d -g 或 hexo devlop -g    | 部署站点前，先生成再部署                                                        |\n\n## 4.站点配置\n配置文件 `_config.yml`\n\n**基本配置：**\n\n| 参数        | 描述                                                                                                                                                 |\n| ----------- | ---------------------------------------------------------------------------------------------------------------------------------------------------- |\n| title       | 网站标题                                                                                                                                             |\n| subtitle    | 网站副标题                                                                                                                                           |\n| description | 网站描述                                                                                                                                             |\n| keywords    | 网站的关键词。支持多个关键词。                                                                                                                       |\n| author      | 您的名字                                                                                                                                             |\n| language    | 网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 zh-Hans和 zh-CN。                 |\n| timezone    | 网站时区。Hexo 默认使用您电脑的时区。请参考 时区列表 进行设置，如 America/New_York, Japan, 和 UTC 。一般的，对于中国大陆地区可以使用 Asia/Shanghai。 |\n\n**部署配置：**\n介绍部署导github:远程创建好仓库，不知道的可以看看[使用 Jekyll 创建 GitHub Pages 站点](https://docs.github.com/cn/pages/setting-up-a-github-pages-site-with-jekyll/creating-a-github-pages-site-with-jekyll)\n安装\n```javascript\n$ npm install hexo-deployer-git --save\n```\n修改配置文件\n```yml\ndeploy:\n  type: git\n  repo: <repository url> # https://bitbucket.org/JohnSmith/johnsmith.bitbucket.io\n  branch: [branch]\n  message: [message]\n```\n| 参数    | 描述                                  | 默认值                                    |\n| ------- | ------------------------------------- | ----------------------------------------- |\n| repo    | github仓库地址(上面新建的带.io的仓库) |\n| branch  | 分支名称                              | 默认master                                |\n| message | 部署的时候的提交信息                  | 默认是站点更新日期：'YYYY-MM-DD HH:mm:ss' |\n| token   | 令牌                                  |\n\n最后执行部署\n``` javascript\n$ hexo d\n```\n\n访问站点(一般要等上几分钟才会出现内容)\nyourname.github.io\n\n## 5.主题更换\n\n下载安装主题\n这里使用一款简约的主题[yilia](https://github.com/litten/hexo-theme-yilia)\n将主题clone到themes文件夹下面\n```javascript\n$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia\n```\n`_config.yml`更改配置（默认是landscape）\n```yml\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: yilia\n```\n本地查看\n```bash\n$ hexo clean\n$ hexo s\n```\n远程部署\n```bash\n$ hexo g\n$ hexo d\n```\n","tags":["hexo博客搭建"]}]