[{"title":"drupal主题更改,相关配置","url":"/2022/06/27/drupal主题更改-相关配置/","content":"\n# Drupal 主题设置\n\n## 使用 DDEV 安装 Drupal 环境\n- 安装ddev\n  ```bash\n  $ curl -LO https://raw.githubusercontent.com/drud/ddev/master/scripts/install_ddev.sh && bash install_ddev.sh\n  ```\n- 搭建环境 # Replace my-site-name\n  ```bash\n  $ export SITE_NAME=my-site-name\n\n  $ mkdir $SITE_NAME\n\n  $ cd $SITE_NAME\n\n  $  ddev config --project-type=drupal9 --project-name $SITE_NAME --docroot=web --create-docroot\n  ```\n- 启动 DDEV 容器\n  ```bash\n  $ ddev start\n  ```\n- 创建drupal应用程序\n  - 如果您的机器上没有安装 Composer，到官网上下载安装，或者使用`my-site-nameddev composer`\n- 开始安装\n  ```bash\n  $ ddev composer create \"drupal/recommended-project\"\n\n  $ ddev composer require drush/drush\n  ```\n- 安装drupal\n  ```bash\n  $ ddev drush site:install --account-name=admin --account-pass=admin\n\n  $ ddev launch\n  ```\n- 安装开发生成模块\n  - 下载并安装Devel Generate 模块（Devel 项目的一部分）并使用它来生成一些示例内容\n  ```bash\n  $ ddev composer require drupal/devel\n\n  $ ddev drush en devel_generate\n  ```\n  - **没有ddev安装**\n  ```bash\n  $ composer require drupal/devel\n\n  $ drush en devel_generate\n  ```\n- 生成用户、标签和内容\n  Devel Generate 带有自定义 Drush 命令，我们可以使用这些命令来生成用户、标签和内容。我们建议您按以下顺序运行命令，以便将您生成的内容分配给随机用户以模拟更真实的体验。\n  ```bash\n  $ ddev drush devel-generate-users 10\n  $ ddev drush devel-generate-terms 20 --bundles tags --max-depth 1\n  $ ddev drush devel-generate-content 25\n  ```\n (optional)  (required in Drupal 9, optional for Drupal 8)  (optional)  (optional)  (optional)  (optional)  (optional)  (optional)  (optional)  (deprecated)  (optional)\n\n## 建立主题\n- 在`web/themes`目录下建立自己的主题`reboot`文件夹\n  ![jCpZQA.png](https://s1.ax1x.com/2022/06/23/jCpZQA.png)\n- 在reboot文件夹下面创建`reboot.info.yml`(命名规范必须是THEME.info.yml)\n- `THEME.info.yml`文件配置属性\n  | 参数                 | 是否必填                                                                    | 描述                                                                                                                                                                                                    |\n  | -------------------- | --------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n  | name                 | 是                                                                          | 主题名称                                                                                                                                                                                                |\n  | type                 | 是                                                                          | 表示扩展的类型，\"module\", \"theme\", or \"profile\"对于主题，应始终将其设置为“主题”。此值区分大小写。                                                                                                       |\n  | description          | 否                                                                          | 主题描述信息                                                                                                                                                                                            |\n  | dependencies         | 否                                                                          | 一个依赖字符串数组，在 8.9.x 中引入。                                                                                                                                                                   |\n  | package              | 否                                                                          | 指定允许您将主题组合在一起的“包”。                                                                                                                                                                      |\n  | core                 | Drupal 8所需的，如果包含 core _ version _ request 则为可选，对 Drupal 9无效 | 指定主题兼容的 Drupal 核心版本。                                                                                                                                                                        |\n  | php                  | 否                                                                          | 所需的最低 PHP 版本。默认为`DRUPAL_MINIMUM_PHP`常量的值。                                                                                                                                               |\n  | version              | 否                                                                          | 指定版本。对于托管在 drupal.org 上的主题，版本号将由打包脚本填写。不要手动指定它，而是完全省略版本行。                                                                                                  |\n  | libraries            | 否                                                                          | 要添加到主题处于活动状态的所有页面的库列表（可以包含 CSS 和 JavaScript 资产）                                                                                                                           |\n  | libraries-override   | 否                                                                          | 要覆盖的库和资产的集合，[更多内容覆盖和扩展库](https://www.drupal.org/node/2216195#override-extend)                                                                                                     |\n  | libraries-extend     | 否                                                                          | 附加库时要添加的库和资产的集合                                                                                                                                                                          |\n  | base theme           | Drupal9必须, Drupal8可选                                                    | 一个主题可以通过将其指定为基本主题来继承另一个主题的资源。建议使用 classy 或 stable9（如果使用 Drupal 8 则为 stable）。如果设置为 false，则不使用基本主题。                                             |\n  | hidden               | 否                                                                          | 指示是否从“外观”页面隐藏主题，使其无法通过 UI 启用/禁用。                                                                                                                                               |\n  | engine               | 否                                                                          | 主题引擎。默认为“twig”。                                                                                                                                                                                |\n  | logo                 | 否                                                                          | logo相对于主题文件的路径。默认情况下，Drupal 将在主题文件夹的根目录中查找名为“logo.svg”的文件并将其用作主题的logo。 .info.yml                                                                           |\n  | screenshot           | 否                                                                          | 相对于主题文件的截图路径。屏幕截图应为 588 像素宽和 438 像素高，尽管它们以较小的尺寸显示。默认情况下，Drupal 将在主题文件夹的根目录中查找名为“screenshot.png”的文件，并将其用作“外观”页面上的主题图像。 |\n  | regions              | 否                                                                          | 主题区域列表。（请注意，区域键前面没有破折号。）content区域是必需的。阅读有关将区域添加到主题的更多信息。                                                                                               |\n  | regions_hidden       | 否                                                                          | 要删除的继承区域列表。                                                                                                                                                                                  |\n  | features             | 否                                                                          | 在主题“设置”页面上公开的功能列表。                                                                                                                                                                      |\n  | ckeditor_stylesheets | 否                                                                          | 要添加到 CKEditor 框架的样式表列表。                                                                                                                                                                    |\n\n配置好主题之后会在界面的后台找到\n![jCAIER.md.png](https://s1.ax1x.com/2022/06/23/jCAIER.md.png)\n\n## 配置regions\n区域在主题的.info.yml文件中表示为键/值对，其中键是用于在代码中标识区域的区域的内部名称，值是用户界面在识别地区。出于这个原因，使用在代码和 UI 中都有意义的键/值对和区域名称非常重要，这样任何人都可以轻松理解预期用途。\n\n区域的内容由放置在当前正在查看的页面上可见的区域中的任何块组成，并且通常在包装标记内的主题的page.html.twig模板文件中输出，就像div旨在提供布局和结构一样。\n- `info.yml`\n  ```yml\n  regions:\n    header: Header1\n    primary_menu: Primary menu1\n    secondary_menu: Secondary menu1\n    page_top: Page top1\n    page_bottom: Page bottom1\n    highlighted: Highlighted1\n    featured_top: Featured top1\n    breadcrumb: Breadcrumb1\n    content: Content1\n    sidebar_first: Sidebar first1\n    sidebar_second: Sidebar second1\n    footer_first: Footer first1\n    footer_second: Footer second1\n    + aaa_content: AAA content\n  ```\n- `page.html.twig`(建templates文件夹，把page.html.twig复制进来) 修改内容\n  ![jCm4ts.md.png](https://s1.ax1x.com/2022/06/23/jCm4ts.md.png)\n\n## 资源模块，外部内部引用\n\nAsset Libraries是THEMENAME.libraries.yml文件中的 YAML 数据结构，它指定一个或多个 CSS 和 JavaScript 文件及其设置，并以唯一标识的库名称捆绑在一起。一旦定义了库，将其添加到页面或将其附加到特定类型的元素，无论库的内容如何，​​都以相同的方式完成。这意味着现在有一种统一的机制来添加 CSS 和 JavaScript，无论是添加到模块还是主题中。\n\n- `THEMENAME.libraries.yml`\n  声明模块 aaa、bbb、ccc，模块中定义需要用到的js、css、依赖包等,\n  加载顺序按照文件列出顺序加载\n  ```yml\n  # aaa模块\n  aaa:\n    version: 1.0\n    css:\n      theme:\n        css/aaa.css: {}\n    header: true # 设置在头部先加载\n    js:\n      js/aaa.js: {}\n\n  # bbb模块\n  bbb:\n    version: 1.0\n    css:\n      theme:\n        css/bbb.css: {}\n    js:\n      js/bbb.js: {}\n\n  # ccc模块\n  ccc:\n    version: 1.0\n    remote: https://github.com/xoxco/rainbow-text\n    license:\n      name: MIT\n      url: https://github.com/xoxco/Rainbow-Text/blob/master/README.md\n      gpl-compatible: true\n    css:\n      theme:\n        css/ccc.css: {}\n    js:\n      js/ccc.js: {}\n    dependencies: # 声明依赖\n      - core/jquery\n      - my_module/my_library\n      - my_theme/my_library\n  ```\n  - **remote：** 如果库是第三方脚本，则提供存储库 URL 以供参考。\n  - **license：** 如果设置了remote属性，则需要license信息。它有 3 个属性：\n    - **名称：** 许可证的可读名称。\n    - **url：** 所用库版本的许可文件/信息的 URL。\n    - **gpl-compatible：** 此库是否与 GPL 兼容的布尔值。\n- 定义的模块如何使用\n  - 全局使用\n    在`THEME.info.yml`libraries引入\n    ```yml\n     libraries:\n      - reboot/aaa\n      - reboot/bbb\n      - reboot/ccc\n    ```\n    ![jClcXq.md.png](https://s1.ax1x.com/2022/06/23/jClcXq.md.png)\n  - 特定页面使用\n    在`THEME.theme`,首页使用aaa模块\n    ```php\n    <?php\n    /**\n    * Implements hook_preprocess_page() for PAGE document templates.\n    */\n    function reboot_preprocess_page(&$variables) {\n      if ($variables['is_front'] == TRUE) {\n        $variables['#attached']['library'][] = 'reboot/aaa';\n      }\n    }\n\n    ```\n    ![jERjKS.md.png](https://s1.ax1x.com/2022/06/27/jERjKS.md.png)\n\n---\n\n## 为主题开发配置环境\n![jEfdw4.md.png](https://s1.ax1x.com/2022/06/27/jEfdw4.md.png)\n![jEfrf1.md.png](https://s1.ax1x.com/2022/06/27/jEfrf1.md.png)\n![jEfgOO.md.png](https://s1.ax1x.com/2022/06/27/jEfgOO.md.png)\n![jEffTH.md.png](https://s1.ax1x.com/2022/06/27/jEffTH.md.png)\n\n---\n\n## 什么是模板文件？Drupal 如何确定使用哪个模板？\n![jE4jWn.md.png](https://s1.ax1x.com/2022/06/27/jE4jWn.md.png)\n![jE5eQx.md.png](https://s1.ax1x.com/2022/06/27/jE5eQx.md.png)\n![jE5QTe.md.png](https://s1.ax1x.com/2022/06/27/jE5QTe.md.png)\n![jE58fA.md.png](https://s1.ax1x.com/2022/06/27/jE58fA.md.png)\n![jE5wTg.md.png](https://s1.ax1x.com/2022/06/27/jE5wTg.md.png)\n![jE5H6x.md.png](https://s1.ax1x.com/2022/06/27/jE5H6x.md.png)\n\n---\n\n## 覆盖模板文件\n![jETxNF.md.png](https://s1.ax1x.com/2022/06/27/jETxNF.md.png)\n![jE7VAO.md.png](https://s1.ax1x.com/2022/06/27/jE7VAO.md.png)\n\n---\n\n## 确定模板的基本名称\n![jV95Sx.md.png](https://s1.ax1x.com/2022/06/27/jV95Sx.md.png)\n![jV9TOO.md.png](https://s1.ax1x.com/2022/06/27/jV9TOO.md.png)\n![jV9xpt.md.png](https://s1.ax1x.com/2022/06/27/jV9xpt.md.png)\n","tags":["drupal主题"]},{"title":"test1","url":"/2022/06/20/test1/","tags":["test1"]},{"title":"测试文章","url":"/2022/06/20/测试文章/","content":"\n# test\n\n---\n\n## 第一章\n\n---\n\n## 第二章","tags":["test1","教材","主题","aaa"],"categories":["教材"]},{"title":"createSite1","url":"/2022/06/17/createSite1/","content":"\n# Generate static files\n- 文档 [https://hexo.io/zh-cn/docs/](https://hexo.io/zh-cn/docs/)\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo Generate static files\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```","tags":["createSite1"]},{"title":"createSite","url":"/2022/06/17/createSite/","content":"\n文档 [https://hexo.io/zh-cn/docs/](https://hexo.io/zh-cn/docs/)\n\n\n## 1.准备工作\n本地下载安装 *[nodejs](http://nodejs.cn/download/)*\n\n安装hexo-cli\n```javascript\n& npm install -g hexo-cli\n```\n\n## 2.初始化\n本地新建一个文件夹Blob,终端输入下面命令，或者手动创建文件夹\n```javascript\n$ mkdir Blob\n```\n```javascript\n$ hexo init Blob\n```\n\n初始化完成之后\n```javascript\n$ cd Blob\n```\n```javascript\n$ npm install\n```\n```javascript\n$ hexo s\n```\n![Alt](aaa.png)\n\n访问http://localhost:4000/\n\n## 3.hexo 常用命令\n\n\n| 命令                           | 描述                                                                            |\n| ------------------------------ | ------------------------------------------------------------------------------- |\n| hexo init [folder]             | 初始化博客,将博客基本模块下载到本地folder下面                                   |\n| hexo new [layout] [blob title] | 创建博客文章，layout指定使用布局，不指定则使用默认布局，blob title 博客文章标题 |\n| hexo clean                     | 清理缓存文件（db.json）和生成的public                                           |\n| hexo s 或 hexo server          | 本地启动站点，访问localhost:4000                                                |\n| hexo g 或 hexo generate        | 生成部署前的站点                                                                |\n| hexo d 或 hexo devlop          | 部署站点                                                                        |\n| hexo d -g 或 hexo devlop -g    | 部署站点前，先生成再部署                                                        |\n\n## 4.站点配置\n配置文件 `_config.yml`\n\n**基本配置：**\n\n| 参数        | 描述                                                                                                                                                 |\n| ----------- | ---------------------------------------------------------------------------------------------------------------------------------------------------- |\n| title       | 网站标题                                                                                                                                             |\n| subtitle    | 网站副标题                                                                                                                                           |\n| description | 网站描述                                                                                                                                             |\n| keywords    | 网站的关键词。支持多个关键词。                                                                                                                       |\n| author      | 您的名字                                                                                                                                             |\n| language    | 网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 zh-Hans和 zh-CN。                 |\n| timezone    | 网站时区。Hexo 默认使用您电脑的时区。请参考 时区列表 进行设置，如 America/New_York, Japan, 和 UTC 。一般的，对于中国大陆地区可以使用 Asia/Shanghai。 |\n\n**部署配置：**\n介绍部署导github:远程创建好仓库，不知道的可以看看[使用 Jekyll 创建 GitHub Pages 站点](https://docs.github.com/cn/pages/setting-up-a-github-pages-site-with-jekyll/creating-a-github-pages-site-with-jekyll)\n安装\n```javascript\n$ npm install hexo-deployer-git --save\n```\n修改配置文件\n```yml\ndeploy:\n  type: git\n  repo: <repository url> # https://bitbucket.org/JohnSmith/johnsmith.bitbucket.io\n  branch: [branch]\n  message: [message]\n```\n| 参数    | 描述                                  | 默认值                                    |\n| ------- | ------------------------------------- | ----------------------------------------- |\n| repo    | github仓库地址(上面新建的带.io的仓库) |\n| branch  | 分支名称                              | 默认master                                |\n| message | 部署的时候的提交信息                  | 默认是站点更新日期：'YYYY-MM-DD HH:mm:ss' |\n| token   | 令牌                                  |\n\n最后执行部署\n``` javascript\n$ hexo d\n```\n\n访问站点(一般要等上几分钟才会出现内容)\nyourname.github.io\n\n## 5.主题更换\n\n下载安装主题\n这里使用一款简约的主题[yilia](https://github.com/litten/hexo-theme-yilia)\n将主题clone到themes文件夹下面\n```javascript\n$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia\n```\n`_config.yml`更改配置（默认是landscape）\n```yml\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: yilia\n```\n本地查看\n```bash\n$ hexo clean\n$ hexo s\n```\n远程部署\n```bash\n$ hexo g\n$ hexo d\n```\n","tags":["4"]},{"title":"aaa","url":"/2022/06/17/My-New-Post/","content":"\n文档 [https://hexo.io/zh-cn/docs/](https://hexo.io/zh-cn/docs/)\n\n\n## 1.准备工作\n本地下载安装 *[nodejs](http://nodejs.cn/download/)*\n\n![aaa](aaa.png)","tags":["Hexo建站","test12","test1"]},{"title":"Hello World","url":"/2022/06/17/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n----\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","tags":["教材1","主题1","aaa1","test133"],"categories":["Hello World"]}]